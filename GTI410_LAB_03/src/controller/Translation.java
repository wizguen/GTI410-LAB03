/*
   This file is part of j2dcg.
   j2dcg is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   j2dcg is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with j2dcg; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package controller;

import java.awt.event.MouseEvent;
import java.util.List;

import view.Application;

import model.Document;

/**
 * <p>Title: Translation</p>
 * <p>Description: Class that performs a translation transformation on a Shape</p>
 * <p>Copyright: Copyright (c) 2004 Sébastien Bois, Eric Paquette</p>
 * <p>Company: (ÉTS) - École de Technologie Supérieure</p>
 * @author unascribed
 * @version $Revision: 1.10 $
 */
public class Translation extends AbstractTransformer {

	private int memX, deltaX;
	private int memY, deltaY;
	private boolean bFirstTranslation = true;
	
	/**
	 * Default constructor
	 */
	public Translation() {
		this.setXTranslate(0);
		this.setYTranslate(0);
	}
	
	/**
	 * @return Translation's id as an AbstractTransformer
	 */
	public int getID() { 
		return ID_TRANSLATE; 
	}
	
	/**
	 * @param dx distance by which to move the object left
	 */
	public void setXTranslate(int dx){
		deltaX = dx;
		System.out.println("Translation : X value is set to " + deltaX);
	}
	
	/**
	 * 
	 *
	 */
	public int getXTranslate(){
		return deltaX;
	}
	
	/**
	 * 
	 *
	 */
	public int getYTranslate(){
		return deltaY;
	}
	
	/**
	 * @param dy distance by which to move the object down
	 */
	public void setYTranslate(int dy){
		deltaY = dy;
		System.out.println("Translation : Y value is set to " + deltaY);
	}
	
	/**
	 * Performs the translation.
	 */
	public void execute(){
		System.out.println("Translation : Processing command ...");
		Document doc = Application.getInstance().getActiveDocument();
		List selectedObjects = doc.getSelectedObjects();

		Command c = new TranslateCommand(deltaX, deltaY, selectedObjects);
		Caretaker.getInstance().execute(c);
	}

	/**
	 * Mouse released event management method
	 * @param e mouse event generated by the system
	 * @return transformation has been performed flag
	 */
	protected boolean mouseReleased(MouseEvent e) {
		bFirstTranslation = true;
		return true;
	}
	
	/**
	 * Mouse dragged event management method
	 * @param e mouse event generated by the system
	 * @return transformation has been performed flag
	 */
	protected boolean mouseDragged(MouseEvent e) {
		if(!bFirstTranslation){
			int uiDeltaX = deltaX;
			int uiDeltaY = deltaY;
			deltaX = (int)e.getPoint().getX()-memX;
			deltaY = (int)e.getPoint().getY()-memY;
			execute();
			deltaX = uiDeltaX;
			deltaY = uiDeltaY;
		} else {
			bFirstTranslation = false;
		}

		memX=e.getX();
		memY=e.getY();
		return true;
	}
}
