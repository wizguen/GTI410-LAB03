/*
   This file is part of j2dcg.
   j2dcg is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   j2dcg is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with j2dcg; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package controller;

import model.*;
import view.Application;
import java.awt.event.*;
import java.util.Iterator;
/**
 * <p>Title: RectangularRegionSelector</p>
 * <p>Description: Class that selects multiple shapes using a rectangular selection area.</p>
 * <p>Copyright: Copyright (c) 2003 Mohammed Elghaouat, Eric Paquette</p>
 * <p>Company: (ÉTS) - École de Technologie Supérieure</p>
 * @author unascribed
 * @version $Revision: 1.5 $
 */
public class RectangularRegionSelector extends AbstractTransformer {

    public RectangularRegionSelector(){
    }

    public int getID(){
	return idRectangularRegionSelector;
   }

    protected boolean mousePressed(MouseEvent e){
         return false;
    }

     /**
	* Mouse dragged event management method
	* @param e mouse event generated by the system
     */
     protected boolean mouseDragged(MouseEvent e){
	Document doc = Application.getInstance().getActiveDocument();

        if(doc.getSelectedObjects().size()>0){
             return false;
        }
	doc.getSelectionRectangle().setCorners(selectionOrigine,e.getPoint());
	doc.notifyDocChanged();
	return true;
     }

	/**
	 * Mouse released event management method
	 * @param e mouse event generated by the system
	 */
	protected boolean mouseReleased(MouseEvent e) {
		Shape shape;
		Document doc = Application.getInstance().getActiveDocument();
		Rectangle selectionRectangle = doc.getSelectionRectangle();
		java.awt.Rectangle awtSelectionRectangle =
			selectionRectangle.getRectangle();
		Iterator iter = doc.getDocumentObjects().listIterator();

		if (selectionRectangle != null) {
			java.awt.Rectangle shapeRectangle;
			while (iter.hasNext()) {
				shape = (Shape) iter.next();

				shapeRectangle = shape.getTransformedRectangle();
				if (awtSelectionRectangle.contains(shapeRectangle)) {
					doc.addSelectedObject(shape);
				}
			}
		}

		doc.deleteSelectionRectangle();
		doc.notifyDocChanged();
		return true;
	}
}
